#!/usr/bin/env bash

################################################################################
# bootstrap
#
# This script sets up a new machine (macOS or Linux) with dotfiles and
# development preferences.
################################################################################


# Thank you, thoughtbot!
bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n[BOOTSTRAP] $fmt\n" "$@"
}


################################################################################
# Variable declarations
################################################################################

osname=$(uname)
export COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
export OLD_DOTFILES_BACKUP=$HOME/old_dotfiles_backup

# Use HTTPS for dotfiles to avoid SSH key issues
export DOTFILES_REPO_URL="https://github.com/sjdweb/dotfiles.git"
export DOTFILES_BRANCH="master"
export DOTFILES_DIR=$HOME/dotfiles

# export BOOTSTRAP_REPO_URL="https://github.com/sjdweb/mac-bootstrap.git"
# export BOOTSTRAP_BRANCH="master"
export DEVBOX_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


################################################################################
# OS Detection and Setup
################################################################################

if [ "$osname" == "Darwin" ]; then
  bootstrap_echo "Detected macOS ($(sw_vers -productVersion))"
  export OS_TYPE="macos"
  export COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
  
  # Check for command line tools on macOS
  if [ ! -d "$COMMANDLINE_TOOLS" ]; then
    bootstrap_echo "Apple's command line developer tools must be installed before
running this script. To install them, just run 'xcode-select --install' from
the terminal and then follow the prompts. Once the command line tools have been
installed, you can try running this script again."
    exit 1
  fi
  
elif [ "$osname" == "Linux" ]; then
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    bootstrap_echo "Detected Linux: $NAME $VERSION"
    export OS_TYPE="linux"
    export LINUX_DISTRO="$ID"
  else
    bootstrap_echo "Unknown Linux distribution"
    export OS_TYPE="linux"
    export LINUX_DISTRO="unknown"
  fi
else
  bootstrap_echo "Unsupported operating system: $osname"
  exit 1
fi


################################################################################
# Setup devbox directory
################################################################################
# NOTE: Assuming script is run from the devbox directory


################################################################################
# Authenticate (macOS and Linux may need sudo)
################################################################################

if command -v sudo >/dev/null 2>&1; then
  sudo -v
  # Keep-alive: update existing `sudo` time stamp until bootstrap has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
fi


# ################################################################################
# # Set machine name
# ################################################################################

# printf "\nPlease enter a name for your Mac and press [ENTER] (e.g. Joshua's iMac)\n"
# read -r -p "> " COMPUTER_NAME
# export COMPUTER_NAME

# printf "\nPlease enter a host name for your Mac and press [ENTER] (e.g. joshuas-imac)\n"
# read -r -p "> " HOST_NAME
# export HOST_NAME

# printf "\nPlease enter your desired time zone and press [ENTER] (e.g. Europe/Kiev)\n(To view available options run \`sudo systemsetup -listtimezones\`)\n"
# read -r -p "> " TIME_ZONE
# export TIME_ZONE


################################################################################
# 1. Run OS-specific setup
################################################################################

bootstrap_echo "Step 1: Running OS-specific setup..."

if [ "$OS_TYPE" == "macos" ]; then
  cp "$DEVBOX_DIR"/install/Brewfile "$HOME"/.Brewfile
  sh "$DEVBOX_DIR"/install/setup-macos.sh 2>&1 | tee ~/devbox-setup.log
elif [ "$OS_TYPE" == "linux" ]; then
  sh "$DEVBOX_DIR"/install/setup-linux.sh 2>&1 | tee ~/devbox-setup.log
fi

bootstrap_echo "Done!"


################################################################################
# 2. Install shell enhancements
################################################################################

bootstrap_echo "Step 2: Installing shell enhancements..."

# Install starship prompt
if ! command -v starship >/dev/null 2>&1; then
  bootstrap_echo "Installing Starship prompt..."
  curl -sS https://starship.rs/install.sh | sh -s -- -y
fi

bootstrap_echo "Done!"


################################################################################
# 3. Setup development tools
################################################################################

bootstrap_echo "Step 3: Setting up development tools..."

# Install asdf for version management
if [ ! -d "$HOME/.asdf" ]; then
  bootstrap_echo "Installing asdf..."
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0
else
  bootstrap_echo "asdf already installed, skipping..."
fi

# Install pnpm if not already installed
if ! command -v pnpm >/dev/null 2>&1; then
  bootstrap_echo "Installing pnpm..."
  # Use standalone installation method
  curl -fsSL https://get.pnpm.io/install.sh | env SHELL=/bin/bash sh -
fi

bootstrap_echo "Done!"


################################################################################
# 4. Setup dotfiles
################################################################################

bootstrap_echo "Step 4: Installing dotfiles..."

if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to $HOME/old_dotfiles_backup..."
  rm -rf "$OLD_DOTFILES_BACKUP"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BACKUP"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
source "$DOTFILES_DIR"/install.sh

bootstrap_echo "Done!"

# Install Zap plugin manager (after dotfiles so zsh config is ready)
if [ ! -f "$HOME/.local/share/zap/zap.zsh" ]; then
  bootstrap_echo "Installing Zap plugin manager..."
  zsh <(curl -s https://raw.githubusercontent.com/zap-zsh/zap/master/install.zsh) --branch release-v1 --keep
fi


################################################################################
# 5. Install Powerline-patched fonts (macOS only - GUI terminals)
################################################################################

if [ "$OS_TYPE" == "macos" ]; then
  bootstrap_echo "Step 5: Installing fixed-width fonts patched for use with Powerline symbols..."
  if [ -d "$HOME"/src/fonts ]; then
    rm -rf "$HOME"/src/fonts
  fi
  git clone https://github.com/powerline/fonts.git "$HOME"/src/fonts
  cd "$HOME"/src/fonts || exit
  ./install.sh
  cd "$HOME" || exit
  rm -rf "$HOME"/src/fonts
  
  bootstrap_echo "Done!"
else
  bootstrap_echo "Step 5: Skipping font installation on Linux (fonts are primarily for GUI terminals)"
fi


################################################################################
# 6. Set OS-specific preferences
################################################################################

if [ "$OS_TYPE" == "macos" ]; then
  bootstrap_echo "Step 6: Setting macOS preferences..."
  
  # shellcheck source=/dev/null
  source "$DEVBOX_DIR"/install/macos-defaults
  
  # shellcheck source=/dev/null
  source "$DEVBOX_DIR"/install/macos-dock
  
  bootstrap_echo "Done!"
fi

echo
echo "**********************************************************************"
echo "**** Devbox setup complete! Please restart your shell. ****"
if [ "$OS_TYPE" == "macos" ]; then
  echo "**** For full effect, restart your Mac. ****"
fi
echo "**********************************************************************"
echo
